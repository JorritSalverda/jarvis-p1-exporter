name: Build

on: [push, pull_request]

env:
  IMAGE_NAME: jsalverda/jarvis-p1-exporter

jobs:
  gitversion:
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

  vendor_sources:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      name: Update crate cargo-vendor cache
      id: vendor_cache
      with:
        path: |
          .cargo
          vendor
        key: cargo-vendor-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          cargo-vendor-release
          cargo-vendor
        enableCrossOsArchive: true
    - uses: actions/cache@v3
      name: Update cargo registry cache
      if: steps.vendor_cache.outputs.cache-hit != 'true'
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-cache-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-cache-release
          ${{ runner.os }}-cargo-cache
    - name: Vendor sources
      if: steps.vendor_cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p .cargo
        mkdir -p vendor
        cargo vendor --versioned-dirs --locked >.cargo/config.toml

  docker:
    runs-on: ubuntu-latest
    needs: [gitversion,vendor_sources]
    env:
      GITVERSION_SEMVER: ${{ needs.gitversion.outputs.semVer }}
    strategy:
      matrix:
        include:
          # - platform: linux/amd64
          #   target: x86_64-unknown-linux-musl
          # - platform: linux/arm64
          #   target: aarch64-unknown-linux-musl
          - platform: linux/amd64
            target: x86_64-unknown-linux-gnu
          - platform: linux/arm64
            target: aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache/restore@v3
        name: Restore crate cargo-vendor cache
        with:
          path: |
            .cargo
            vendor
          key: cargo-vendor-release-${{ hashFiles('**/Cargo.lock') }}
          enableCrossOsArchive: true
          fail-on-cache-miss: true
      - run: sudo apt-get update && sudo apt-get install -y libudev-dev
      - run: rustup component add clippy
      - run: cargo clippy --no-deps -- --deny "warnings"
      - run: cargo test
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.gitversion.outputs.semVer }}
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v4
        id: build
        with:
          context: .
          build-args: |
            CARGO_BUILD_TARGET=${{ matrix.target }}
            CARGO_NET_OFFLINE=true
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}-build-cache-${{ matrix.target }}
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}-build-cache-${{ matrix.target }},mode=max
          outputs: type=image,name=${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: [gitversion,docker]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.gitversion.outputs.semVer }}
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  helm:
    runs-on: ubuntu-latest
    needs: [gitversion]
    env:
      GITVERSION_SEMVER: ${{ needs.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v2
      - uses: azure/setup-helm@v3
        with:
          version: v3.10.1
      - run: helm lint --with-subcharts helm/jarvis-p1-exporter
      - run: helm package --app-version $GITVERSION_SEMVER --version $GITVERSION_SEMVER --dependency-update helm/jarvis-p1-exporter
      - uses: actions/checkout@v2
        with:
          repository: JorritSalverda/helm-charts
          ref: master
          path: helm-charts
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      - run: |
          mkdir -p helm-charts/charts
          cp jarvis-p1-exporter-${GITVERSION_SEMVER}.tgz helm-charts/charts
          cd helm-charts
          helm repo index --url https://helm.jorritsalverda.com/ .
          git config user.email 'bot@estafette.io'
          git config user.name 'estafette-bot'
          git add --all
          git commit --allow-empty -m "jarvis-p1-exporter $GITVERSION_SEMVER"
          git push origin master

  tag:
    runs-on: ubuntu-latest
    needs: [gitversion, helm]
    env:
      GITVERSION_SEMVER: ${{ needs.gitversion.outputs.semVer }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          git tag -f $GITVERSION_SEMVER
          git push origin $GITVERSION_SEMVER
